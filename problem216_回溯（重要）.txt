//用回溯解的，每次确定一个数丢给下一层是一个O（9^k）算法
//注意为了避免重复，我们记录一下上一个数字，每次只找比上一个数字
//大的数字。

class Solution {
public:
    void solver(int k, int n, vector<bool> used, vector<vector<int>>& result, vector<int> record = {}, int last = 1){
        if(k == 0 && n == 0){
            result.push_back(record);
            return;
        }
        if(k == 0 || n == 0){
            return;
        }
        for(int i = last; i < 10; i++){
            if(!used[i] && i <= n){
                used[i] = 1;
                record.push_back(i);
                solver(k - 1, n - i, used, result, record, i);
                record.pop_back();
                used[i] = 0;
            }
        }
        return;
    }
    
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<bool> used(10, 0);
        vector<vector<int>> result;
        
        solver(k, n, used, result);
        
        return result;
        
    }
};