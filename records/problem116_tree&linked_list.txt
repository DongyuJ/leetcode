//ac beats 99% dec 27 2018
//problem: let every level of a tree be a linked list
//travel the tree twice,
//first, recrusively link every right child to left child
//second, for the former level(have been linked), every right child of 
//previous node pointed to left child of its next node.

//actually, these two travel can be combined as one

/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void conn(TreeLinkNode *T){
        if(T -> left == NULL)
        {
            return;
        }
        T->left->next = T->right;
        conn(T->left);
        conn(T->right);
        return;
    }
    void connect(TreeLinkNode *root) {
        if(root == NULL)
        {
            return;
        }
        conn(root);
        while(root->left != NULL)
        {
            TreeLinkNode *t = root;
            while(t->next != NULL)
            {
                t->right->next = t->next->left;
                t = t->next;
            }
            root = root->left;
        }
    }
};