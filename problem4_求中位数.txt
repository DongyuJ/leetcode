//may/23/2018 100ms
//将数组进行重排列，通过每次取两个数组中，小的一方，但是这道题用标记位检索效果不好，应直接比较两数组各个位置。

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int flag = 0;
    //cout<<nums1[0]<<nums2[0]<<nums2[1]<<nums2[2]<<endl;
    int l = nums1.size() + nums2.size();
    //cout<<l<<endl;
    int newnum[10000] = {-1};
    int j = 0;
    int k = 0;
    //cout<<l;
    if(nums1.size() == 0)
    {
        for(int i = 0;i < l;i++)
        {
            newnum[i] = nums2[i];
        }
    }
    else if(nums2.size() == 0)
    {
        for(int i = 0;i < l;i++)
        {
            newnum[i] = nums1[i];
        }
    }
    else //if(nums1.size() + nums2.size() != 0)
    {
        int fnums1 = nums1[0];
        int fnums2 = nums2[0];
        for(int i = 0;i < l;i++)
        {
        //cout<<i<<endl;
            if(flag == 0)
            {
                if(fnums2 < nums1[j] || j == nums1.size())
                {
                    flag = 1;
                    fnums1 = nums1[j];
                    if(j == nums1.size())
                    {
                        fnums1 = 65535;
                    }
                    newnum[j+k] = fnums2;
                    k++;
                    continue;
                    //cout<<k<<endl;
                }
                else
                {
                    newnum[j+k] = nums1[j];
                    j++;
                    //cout<<j<<endl;
                }
            }
            if(flag == 1)
            {
                if(fnums1 < nums2[k] || k == nums2.size())
                {
                    flag = 0;
                    fnums2 = nums2[k];
                    if(k == nums2.size())
                    {
                        fnums2 = 65535;
                    }
                    newnum[j+k] = fnums1;
                    j++;
                    continue;
                }
                else
                {
                    newnum[j+k] = nums2[k];
                    k++;
                }
            }
        }
    }
    //cout<<newnum[0]<<"-"<<newnum[1]<<"-"<<newnum[2]<<"-"<<newnum[3]<<endl;
    //cout<<l<<endl;
    float median;
    if(l%2 == 0)
    {
        median = (float)(newnum[l/2] + newnum[(l/2)-1])/2;
    }
    else
    {
        median = newnum[l/2];
    }
        return median;
    }
};