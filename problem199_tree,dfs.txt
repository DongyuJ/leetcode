//用一个dfs先遍历右子节点后便利左子节点，这样对于每一层都会先访问
//最右侧节点，然后向左依次访问。
//发现目前的深度（level）等于result记载的节点数的时候
//证明这一层的最右侧节点就是当前节点，加入result中。

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, vector<int> &result, int level){
        if(root == NULL){
            return;
        }
        
        if(result.size() == level){
            result.push_back(root->val);
        }
        
        dfs(root->right, result, level + 1);
        dfs(root->left, result, level + 1);
    }
    
    vector<int> rightSideView(TreeNode* root) {
        vector<int> result;
        
        dfs(root, result, 0);
        
        return result;
    }
};