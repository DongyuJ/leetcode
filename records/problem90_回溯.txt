//Jul/31/2018 ac 12ms last 5%
//利用回溯每次都在每一个上一层的结果的后面加上当前层的数字，作为下一个结果push_back，添加前利用map检查一下是否重复。
//比如[1,2,3],先idx向下寻找，当idx=3的时候，返回一个[[]],然后进入idx=2的层，结果变成[[][3]],idx=1:[[][3][2][3,2]],idx=0:[[][3][2][3,2][1][3,1][2,1][3,2,1]] 

class Solution {
public:
    vector<vector<int>> backtracking(vector<int>& nums, int idx, map<vector<int>,bool>& dic)
    {
        vector<vector<int>> res;
        if(idx == nums.size())
        {
            res.push_back({});
            return res;
        }
        res = backtracking(nums, idx + 1, dic);
        int l = res.size();
        for(int i = 0; i < l; i++)
        {
            vector<int> temp = res[i];
            temp.push_back(nums[idx]);
            if(dic.count(temp) == 0)
            {
                res.push_back(temp);
                dic[temp] = 1;
            }
        }
        return res;
    }
    
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> res;
        map<vector<int>,bool> dic;
        if(nums.empty())
        {
            return res;
        }
        sort(nums.begin(),nums.end());
        res = backtracking(nums, 0, dic);
        return res;
    }
};