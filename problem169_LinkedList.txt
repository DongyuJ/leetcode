//这是一个比较巧妙的办法。当pA走到底后从headB再开始走；
//同样pB走到底再从headA开始，这样第二次必定同时到交点

//如果相遇返回相遇点，如果第二次又走到底就返回NULL

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(headA == NULL || headB == NULL){
            return NULL;
        }
        
        ListNode* pA = headA;
        ListNode* pB = headB;
        bool flag1 = 1;
        bool flag2 = 1;
        while(flag1 || flag2 || (!pA == NULL && !pB == NULL)){
            if(pA == NULL){
                flag1 = 0;
                pA = headB;
            }
            if(pB == NULL){
                flag2 = 0;
                pB = headA;
            }
            
            if(pA == pB && pA != NULL){
                return pA;
            }
            
            pA = pA->next;
            pB = pB->next;
        }
        return NULL;
    }
};