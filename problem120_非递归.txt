//ac Jan/2/2019
//We add the previous level to the appopriate position of 
//the next level and each time only mentain two rows
//and compute from the top to the bottom
//the space complexity is O(2n + 1) = O(n)
//and the time complexity is O(n^2)

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        if(triangle.empty()){
            return 0;
        }
        vector<int> pre = {triangle[0][0]};
        vector<int> cur = pre;
        int res = INT_MAX;
        for(int i = 1; i < triangle.size(); i++){
            cur = triangle[i];
            cur[0] += pre[0];
            cur[i] += pre[i - 1];
            for(int j = 1; j < i; j++){
                cur[j] += min(pre[j], pre[j - 1]);
            }
            pre = cur;
        }
        for(int i = 0; i < triangle.size(); i++){
            res = min(res, cur[i]);
        }
        return res;
    }
};