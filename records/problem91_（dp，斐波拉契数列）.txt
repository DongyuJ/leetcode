//Aug/2/2018 ac 0ms beats 100%
//本来觉得书很简单的dp题目，结果被0的问题卡了一上午
//不考虑0的话只分两种情况，当前位可以和之前的位组成26以内的数，那么dp[i]=dp[i-1]+dp[i-2],否则就是dp[i] = dp[i-1]
//但是考虑上0的情况，就会变得复杂很多首先在第一位的0或者跟在不是1和2后面的0都将使整个数组无法翻译，即返回0
//其次是如果遇到了0相当于将和前面的一个数字进行了绑定，这时候，其实dp[i]就等于dp[i-2]（dp[i-1]相当于被捆绑后不能先前匹配）

class Solution {
public:
    int numDecodings(string s) {
        
        vector<int> dp(s.size());
        if(s[0] == '0')
        {
            return 0;
        }
        for(int i = 1; i < s.size(); i++)
        {
            if(s[i] == '0' && (s[i-1] == '0' || s[i-1] > '2'))
            {
                return 0;
            }
        }
        dp[0] = 1;
        if(s[0] > '2' || (s[0] == '2' && s[1] > '6') || s[1] == '0')
        {
            dp[1] = 1;
        }
        else
        {
            dp[1] = 2;
        }
        for(int i = 2; i < s.size(); i++)
        {
            
            if(s[i] == '0')
            {
                dp[i] = dp[i-2];
            }
            else if(s[i - 1] > '2' || (s[i] > '6' && s[i - 1] == '2') || s[i - 1] == '0')
            {
                dp[i] = dp[i-1];
            }
            else
            {
                dp[i] = dp[i-2] + dp[i-1];
            }
        }
        return dp[s.size()-1];
    }
};