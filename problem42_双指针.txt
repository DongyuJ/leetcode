//Jun/16/2018 ac 601ms 效率较低 参考网上
//一开始我通过寻找局部最大值，但是，发现两个连续局部最大值之间的注水面积不一定是正确的，有可能出现[5,4,3,4,3,2,3,4,5]这种情况（两个5之间才是最大）
//后来发现一种方法，将注水面积微分为很多个水柱，每个水柱一个单位，只要找到每个位置对应的水柱相加就是最后答案。
//水柱的计算方法是，找到当前点左边和右边的最大值，这两个值中较小的一个如果大于当前值，那么较小的一个减当前值就是水柱长度
//我写的这个程序还可以优化，因为我每次找左右的最大值都进行了一次遍历，其实完全可以之间比较当前值与刚才的左右最大值的大小就可以知道，当前值的左右最大值。
//可以将效率从O（n2）提高到O（n）

class Solution {
public:
    int trap(vector<int>& height) {
	if(height.size() < 3)
    {
        return 0;
    }
        
        int pl = 0;
	int pr = height.size() - 1;
	
	int res = 0;
	while (height[pl + 1] >= height[pl])	//优化，将开头和结尾的递增（减）序列去除（因为这样的结构不能注水）
	{
		pl++;
		if (pl == height.size() - 1)
		{
			return 0;
		}
	}

	while (height[pr - 1] >= height[pr])
	{
		pr--;
		if (pr == pl)
		{
			return 0;
		}
	}
	int pi = pl + 1;
	while (pi < pr)
	{
		//pi++;
		int left = 0;
		int right = 0;
		for (int i = pl; i < pi; i++)
		{
			left = max(height[i], left);
		}
		for (int i = pr; i > pi; i--)
		{
			right = max(height[i], right);
		}
		if(min(left,right) > height[pi])
			res += min(left, right) - height[pi];
		pi++;
	}
	return res;
}
};