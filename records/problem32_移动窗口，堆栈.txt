//Jun/9/2018 ac 1175ms 差点超时，本来是超时的后来优化了一下才过的
//
//运用了移动窗口的方式来寻找最长的子串，但是可能由于中间的逻辑有重复，导致效率低下
//思路和前面判断括号是否合法一致，遇到左括号无条件打入栈，但是，打入的是该括号的下角标。遇到右括号就弹出一个左括号，这时检查一下栈内剩余，如果刚好是空的
//那么就将这一条记录下来，同时右窗口继续往下，因为还可能有后续的合法序列。如果不是空的，暂时不管右窗口继续移动。如果在弹出之前已经是空的了，那么之前的
//序列长度在弹出上一个括号时已经记录，现在只需要将左窗口移到这个不合法右括号的下一位（因为右括号不合法，所以这个括号以左部分的最大合法数目一定是上一次记录的）
//然后就是右窗口如果达到了最后一位，这时如果栈内是空的，那么记录的这一条一定比左窗口缩小后记录的都要大，比较过与原纪录的最大值大小后就可以返回了。
//如果栈内还有剩余，说明有多余的左括号，这时一开始的处理方法是将左窗口设为栈底的值加1，即左窗口往右的第一个左括号。结果超时了（有测试数据是一整页的左括号）
//然后我想的是剩下的括号如果连续的话一定是无效的，所以再跳过所有的连续括号之后，将左窗口定位到那个位置，勉强ac了。

class Solution {
public:
    int longestValidParentheses(string s) {
	stack<int> st;
	int pi=0, pr = 0;
	int maxl = 0;
	int res = 0;
	while (s.size() - pr > res)					//停止条件是左窗口和又边界的距离不足保存的最大合法长度
	{
		if (s[pi] == '(')
		{
			st.push(pi);
			maxl++;
			pi++;
		}
		else
		{
			if (st.empty())					//遇到不合法的右括号
			{
				pi++;
				pr = pi;
				maxl = 0;
			}
			else
			{
				st.pop();
				if (st.empty())//			//pop完正好合法
				{
					maxl++;
					if (maxl > res)
					{
						res = maxl;
					}
					pi++;
				}
				else
				{
					maxl++;
					pi++;
				}
			}
		}
		if (pi == s.size())					//右窗口到达右边界
		{
			if (st.empty())
			{
				if (maxl > res)
				{
					res = maxl;
				}
				break;
			}
			else
			{
				//pr = st.top();			//跳过下标连续的括号，顺便清空栈
				int pre = st.top();
				st.pop();
				while (!st.empty())
				{
					//st.pop();
					int cur = st.top();
					if (cur != pre - 1)
					{
						pr = st.top();
					}
					pre = cur;
					st.pop();
				}
				pr++;
				pi = pr;
				maxl = 0;
			}
		}
	}
	return res;
}
};