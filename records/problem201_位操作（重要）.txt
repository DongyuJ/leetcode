//注意位操作的思路，与一般的解题思路不同

//本题，只寻找m和n相同的前k位，后面补0即可
//比如，m 1001101， n 1011101，他们之间所有数按位与后
//就应该是10 00000. 这是因为，这些相同位想与保持不变，而后面的
//位置因为不同，相与为0.（不一定m和n相与为0，但是中间的数
//由于进位，总会都不同）

class Solution {
public:
    int rangeBitwiseAnd(int m, int n) {
        int cnt = 0;
        
        while(m != n){
            m >>= 1;
            n >>= 1;
            
            cnt++;
        }
        
        return m << cnt;
    }
};