//Jun/10/2018 ac 14ms time O(n2)
//利用动态规划的方式，每遍历到一个数，就将到它为止的最大长度储存下来。
//计算的方式是，如果s[i]是左括号，那么将dp[i]设为0。如果是右括号，则向前找未匹配的左括号。寻找的时候需要跳过已经匹配完成的括号对。
//当找到dp[j]=0，s[j]='('的时候，即为未匹配的左括号，如果j!=0(s[j]不是第一位)，这时将dp[i]设为i-j+1+dp[j-1]。i-j+1是计算这两个括号之间的距离
//（中间是符合题意且已经计算过结果的括号序列）
//dp[j-1]代表的是此前符合题意的子序列长度。（如果j==0）即找到的未匹配左括号是第一位，则左侧不存子序列，不需要加。

class Solution {
public:
    	int longestValidParentheses(string s) {
	if (s.size() <= 1) return 0;
	int n = s.size();
	vector<int>dp(n + 1, 0);
	int maxLen = 0;
	for (int i = 0; i < n; i++)
	{
		if (s[i] == '(')
		{
			dp[i] = 0;
		}
		else
		{
			int j = i - 1;
			//cout << j;
			while (j >= 0 && dp[j] > 0)
			{
				j -= dp[j];
			}
			if (j > 0 && s[j] == '(')
			{
				dp[i] = i - j + 1 + dp[j - 1];
			}
            else if(j == 0 && s[j] == '(')
            {
                dp[i] = i - j + 1;
            }
		}
		maxLen = max(maxLen,dp[i]);
	}
	return maxLen;
}
};