//may/25/2018 ac 155ms(last 10%)
//采用了递归的方法，即遇到“*”就将其匹配为对应字符，重复k次，若不行，增大k值继续带入原函数
//从后向前判断，这样可以先遇到*，不然需要判断字符的下一位是否是*
class Solution {
public:
    bool isMatch(string s, string p)
{
    int sl = s.length();
    int pl = p.length();
    int pi = pl - 1;
    int si = sl - 1;
    int isEnd = 0;
    char temp;
    int k = 0;
    if(pl == 0 && sl == 0)			//先对一个或者没有字符的情况特殊处理，因为不涉及“*”
    {
        return 1;
    }
    else if(sl * pl == 1 && p[pi] == '.')
    {
        return 1;
    }
    else if(sl * pl == 1 && p[pi] == s[si])
    {
        return 1;
    }
    else if(sl * pl == 1 && p[pi] != s[si])
    {
        return 0;
    }
    while(!isEnd)				
    {
        if(si == -1 && pi == -1)		//匹配成功情况，两字符串同时结束，即标记位达到-1（0号位匹配成功后减一）
        {
            return 1;
        }
        else if(si < -1)			//匹配不成功特殊情况，s已经结束，而p中还有除了*外内容，如s{a}，p{..a*}
        {
            return 0;
        }
        if(p[pi] == s[si])			//匹配成功就找前面一位
        {
            pi--;
            si--;
        }
        else if(p[pi] == '.')			//p如果是.无条件匹配一位，由于si < -1已经判断过了，不需要担心越界问题
        {
            pi--;
            si--;
        }
        else if(p[pi] == '*')			//遇到*分两种情况，一种，前面是.根据题目，可以为任意字符（可不同），所以直接作为k个.再带入原函数递归求解
        {
            pi--;
            if(pi == '.')
            {
                temp = '.';
            }
            else				//若不是.，那么只能是*前一位的特定字符，直接取pi处值
            {
                temp = p[pi];
            }
            while(!isEnd)			//循环直到满足判断条件（return 0或者1）
            {
                string scut,pcut;
                for(int i = 0; i < pi; i++) 	//复制pi-1前的p，并将k个temp填上
                {
                    pcut = pcut + p[i];
                }
                for(int i = 0; i < k; i++)
                {
                    pcut = pcut + temp;
                    //cout<<pcut<<endl;
                }
                for(int i = 0; i <= si; i++)	//复制剩余的s（未匹配完的）
                {
                    scut = scut + s[i];
                }
                if(isMatch(scut,pcut))		//将剩余字符串递归带入，若能找到直接返回1
                {
                    return 1;
                }
                else				//不能的话尝试不同的k，注意k最大应该不超过s中字符的总个数
                {
                    k++;
                    if(k > si + 1)		//超出个数，未能匹配
                    {
                        break;
                    }
                }
            }
            return 0;
        }
        else
        {
            return 0;
        }
    }
}
};