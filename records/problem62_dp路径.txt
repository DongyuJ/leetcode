//Jun/20/2018 ac 2ms beats 100%
//规则可以解释为，达到每一格所有可能的情况为上一格和左一格的情况之和（因为这一格只能由其上一格和左一格达到）
//所以动态规划方程为dp[i][j] = dp[i - 1][j] + dp[i][j - 1]

class Solution {
public:
    int uniquePaths(int m, int n) {

	vector<vector<int>> dp(m + 1);	//定义一个m*n数组的方法
	for (int i = 0; i <= m; i++)
	{
		dp[i].resize(n + 1);
	}
	dp[0][1] = 1;
	for (int i = 1; i <= m; i++)
	{
		for (int j = 1; j <= n; j++)
		{
			dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
		}
	}
	return dp[m][n];
}
};