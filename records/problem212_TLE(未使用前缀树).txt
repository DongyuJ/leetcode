// TLE， 超时
// 利用problem 79 的判断加上了排序等，线下测试是通过了，但是有一组测试数据全是a，word列表里面也都是前面有很多a的，导致超时，必须使用前缀树。

bool isFind(vector<vector<char>>& board, string word, int row, int col, int num, vector<vector<bool>> used)
{
	if (num == word.size())
	{
		return true;
	}
	if (board[row][col] != word[num] || used[row][col])
	{
		return false;
	}
	used[row][col] = 1;
	if (row > 0 && isFind(board, word, row - 1, col, num + 1, used))
	{
		return true;
	}
	if (col > 0 && isFind(board, word, row, col - 1, num + 1, used))
	{
		return true;
	}
	if (row < board.size() - 1 && isFind(board, word, row + 1, col, num + 1, used))
	{
		return true;
	}
	if (col < board[0].size() - 1 && isFind(board, word, row, col + 1, num + 1, used))
	{
		return true;
	}
	return false;
}

vector<string> findWords(vector<vector<char>>& board, vector<string> word) {
	vector<vector<bool>> used(board.size());
	for (int i = 0; i < used.size(); i++)
	{
		used[i].resize(board[0].size(), 0);
	}
	//cout << used[1][2];
	vector<string> res;
	sort(word.begin(), word.end());
	int flag = 0;
	for (int k = 0; k < word.size(); k++)
	{
		if (k > 0 && word[k] == word[k - 1])
		{
			continue;
		}
		for (int i = 0; i < board.size() && !flag; i++)
		{
			for (int j = 0; j < board[0].size() && !flag; j++)
			{
				if (board[i][j] == word[k][0])
				{
					if (word[k].size() == 1)
					{
						res.push_back(word[k]);
						flag = 1;

					}
					else if (isFind(board, word[k], i, j, 0, used))
					{
						res.push_back(word[k]);
						flag = 1;
					}
				}
			}
		}
		flag = 0;
	}
	return res;
}