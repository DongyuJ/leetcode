//Jul/28/2018 ac 8ms beats 35%
//自己只能想到暴力搜索，但是觉得复杂度太高放弃了，网上说加上优化（剪枝）是可以通过的
//后来看到说这是一个三维的动态规划，前两维i，j代表从s1的第i位和s2的第j位开始，第三维len代表长度，注意这里len取值从1到l，舍弃第0位，这样看起来直观一些
//不过初始化要记得给k赋l+1的空间，同时多维容器的赋值方法如下

//才能运用前面的计算为后面提供信息，首先初始化：对于len=1的所有i，j就是比较s1的第i位和s2的第j位，相等就填1，否则就保持为0；
//然后从len=2开始进行搜索（第一重循环），对于每一个i，j（注意，i，j为起始位置，所以i+len<=l，j也同样）（第二、三重循环），对于每一个中间位置进行切割（第四重）
//其中k为切割点，即将前三重循环创造的子串切割成长度为k和长度为len-k的两个更小的子串。
//如果大的子串要满足题目要求，那么小的子串中（第四重循环中）至少有一个切割方法满足下面两个条件中的至少一个：
//1.切割后的子串1前半部分==切割后子串2的前半部分，并且后半部分也相等;   2.切割后的子串1前半部分==切割后子串2的前后部分，子串1后半部分也与子串2的前半部分相等;
//这样就可以从len较小的情况中找到已经进行过的判断，写出关系式：(dp[i][j][k] && dp[i + k][j + k][len - k]) || (dp[i + k][j][len - k] && dp[i][j + len - k][k])
//这里注意，循环中只要有一种切割满足，就可以算作当前位置（i，j，len）满足题意，就可以break出去了。
//还要注意长度和起始点加起来应该等于len

class Solution {
public:
    bool isScramble(string s1, string s2) {
	if (s1.size() != s2.size())
	{
		return false;
	}
	int l = s1.size();
	//cout << l;
	vector<vector<vector<int>>> dp(l, vector<vector<int>>(l, vector<int>(l + 1, 0)));
	for (int i = 0; i < l; i++)
	{
		for (int j = 0; j < l; j++)
		{
			dp[i][j][1] = (s1[i] == s2[j]);
		}
	}
	for (int len = 2; len <= l; len++)
	{
		for (int i = 0; i <= l - len; i++)
		{
			//cout << i << " " << l - len << endl;
			for (int j = 0; j <= l - len; j++)
			{
				for (int k = 1; k < len; k++)
				{
					//cout << i << " " << j << " " << k << " " << endl;
					if( (dp[i][j][k] && dp[i + k][j + k][len - k]) || (dp[i + k][j][len - k] && dp[i][j + len - k][k]))
                    {
                        dp[i][j][len] = 1;
                        break;
                    }
				}
			}
		}
	}
	return dp[0][0][l];
}
};