//Jul/2/2018 ac 14ms beats 47%
//看了题目的标签才发现可以用dp解决
//初始化的相关备注已经注释在题目中了，给dp数组加入了一行，一列，对应当word1，word2为空时的变换步数，其实就是当前另一个字符串的长度
//然后从i，j = 1开始遍历，其中dp[i][j]代表word1前i个字符与word2前j个字符匹配
//所以这就有两种情况，

//一。要判断的当前这两个字符相同，那么只要看去掉当前这两个字符后最少的变换步数即可，所以这时dp[i][j] = dp[i-1][j-1]
//二。这两个字符不同的话，有三种变换的方式，
//	1.通过变换得到，即dp[i-1][j-1] + 1 2.通过添加得到，即dp[i][j-1] + 1 3.通过删除得到，即dp[i-1][j] + 1找到花费步数最少的那一种就是当前需要的最少步数

class Solution {
public:
    int minDistance(string word1, string word2) {
	int l1 = word1.size();
	int l2 = word2.size();
    if(l1 ==0 || l2 == 0)
    {
        return max(l1,l2);
    }

	vector<vector<int>> dp(l2 + 1);	//dp[0][] and dp[][0] means no character in word1 and word2
	for (int i = 0; i <= l2; i++)	//resize dp to a l2 * l1 matrix and initialize dp[][0]
	{
		dp[i].resize(l1 + 1,i);
	}

	for (int i = 1; i <= l1; i++)	//init for dp[0][]
	{
		dp[0][i] = dp[0][i - 1] + 1;
	}
	//so that the first row and first column should be [0,1,2,3...] 
	//means changing from nothing to i characters or from i characters to nothing
	for (int i = 1; i <= l2; i++)
	{
		for (int j = 1; j <= l1; j++)
		{
			if (word1[j-1] == word2[i-1])
			{
				dp[i][j] = dp[i - 1][j - 1];
			}
			else
			{
				dp[i][j] = min(min(dp[i][j - 1], dp[i - 1][j]), dp[i - 1][j - 1]) + 1;
			}
		}
	}
	/* @test
	for (int i = 0; i < dp.size(); i++)
	{
		for (int j = 0; j < dp[i].size(); j++)
		{
			cout << dp[i][j] << " ";
		}
		cout << endl;
	}
	*/
	return dp[l2][l1];
}
};