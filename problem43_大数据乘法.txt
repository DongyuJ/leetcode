//Jun/18/2018	ac    15ms
//字符串乘法、加法
//我的处理方法是首先将一个数字的每一位乘以另一个数字，并将结果保存在一个vector<string>容器中
//然后对该容器中的字符串再做相加处理，相加过程中，对每一个string进行遍历，并与res相加，注意，需要将string中的数向右偏移i位

class Solution {
public:
    string multiply(string num1, string num2) {
	if (num1.empty() || num2.empty())
	{
		return "";
	}
	else if (num1 == "0" || num2 == "0")
	{
		return "0";
	}
	string res;
	int carry;
	vector<string> temp_multi;
	string temp;
	for (int i = num1.size() - 1; i >= 0; i--)
	{
		carry = 0;
		for (int j = num2.size() - 1; j >= 0; j--)
		{
			temp += (((num1[i] - '0') * (num2[j] - '0')) + carry) % 10 + '0';
			carry = (((num1[i] - '0') * (num2[j] - '0')) + carry) / 10;
		}
		if (carry)				//最后一位的进位
		{
			temp += carry + '0';
		}
		temp_multi.push_back(temp);		//Be careful, it is reversed
		temp = "";
		//cout << temp_multi[num1.size() - i - 1] << endl;
	}
	for (int i = 0; i < temp_multi.size(); i++)
	{
		carry = 0;
		for (int j = 0; j < temp_multi[i].size(); j++)
		{
			if (res[i + j] == NULL)
			{
				res += ((temp_multi[i][j] - '0') + carry) % 10 + '0';
				carry = ((temp_multi[i][j] - '0') + carry) / 10;
			}
			else
			{
				int t = carry;								//注意，这里carry和res分别被后面用到，所以需要t记录一下
				carry = (res[i + j] - '0' + temp_multi[i][j] - '0' + carry) / 10;
				res[i + j] = (res[i + j] - '0' + temp_multi[i][j] - '0' + t) % 10 + '0';
			}
			//cout << res << endl;
		}
		if (carry)
		{
			res += carry + '0';
		}
	}
	reverse(res.begin(), res.end());
	return res;
}
};