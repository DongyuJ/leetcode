//Jun/19/2018 ac 333ms 
//用二维dp数组来做的
//i代表前i个字符，j代表前j个模式，定义dp[i+1][j+1] = 1如果满足以下情况，其他保持为0
//对于？和字符匹配的情况：dp[i + 1][j + 1] = dp[i][j];即如果之前i位用之前j个模式可以匹配，那么这个也可以匹配
//如果遇到的是*：dp[i + 1][j + 1] = dp[i][j] || dp[i + 1][j] || dp[i][j + 1];即有三种情况都可以使这个*也成功匹配（按顺序）
//1.之前i位用之前j个模式可以匹配
//2.用前j个模式可以匹配到当前位（i+1位）（这是*匹配为空就可以使j+1个模式也与i+1位字符匹配，至于是否匹配后面的字符，由后面的循环来判定）
//3.用当前j+1个模式可以匹配到前i位字符，那么这个*再多匹配上当前i+1位的字符即可

class Solution {
public:
    bool isMatch(string s, string p) {
	int slen = s.size();
	int plen = p.size();
	bool dp[1500][1500] = {0};
	dp[0][0] = 1;
	int start = 0;
	while (p[start] == '*')		//注意，这里用于处理前置的*由于前置*都需要匹配为空，需要在第0行补上相应个1作为起始点
	{
		start++;
		dp[0][start] = 1;
	}
	for (int i = 0; i < slen; i++)
	{
		for (int j = 0; j < plen; j++)
		{
			if (p[j] == '?' || p[j] == s[i])
			{
				dp[i + 1][j + 1] = dp[i][j];
			}
			else if (p[j] == '*')
			{
				dp[i + 1][j + 1] = dp[i][j] || dp[i + 1][j] || dp[i][j + 1];
			}
		}
	}

	return dp[slen][plen];
}
};