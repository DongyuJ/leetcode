//Jun/26/2018 ac 29ms last 10%
//通过一次遍历

/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
	int pi = 0;
	vector<Interval> res;
	if (intervals.empty())
	{
		res.push_back(newInterval);
		return res;
	}
	int newStart, newEnd;
	bool flag = false;
	for (int i = 0; i < intervals.size(); i++)
	{
		if (flag || intervals[i].start < newInterval.start)
		{
			res.push_back(intervals[i]);
		}
		else
		{
			pi = i - 1;
			if (res.empty() || intervals[pi].end < newInterval.start)
			{
				newStart = newInterval.start;
			}
			else
			{
				newStart = intervals[pi].start;
				res.pop_back();
			}
			while (i != intervals.size() && newInterval.end >= intervals[i].start)
			{
				i++;
			}
			i--;
			
			if (i < 0)
			{
				newEnd = newInterval.end;
			}
			else
			{
				newEnd = max(intervals[i].end, newInterval.end);
			}
			res.push_back(Interval(newStart, newEnd));
			flag = true;
		}
	}
	pi = res.size() - 1;
	if (!flag)
	{
		if (newInterval.start <= res[pi].end)
		{
			newStart = res[pi].start;
			newEnd = max(res[pi].end, newInterval.end);
			res.pop_back();
			res.push_back(Interval(newStart, newEnd));
		}
		else
		{
			res.push_back(newInterval);
		}
	}
	return res;
}

};